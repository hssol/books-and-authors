(djangoPy3Env) C:\Users\k\Desktop\Python_stack\django\django_orm\randomwWordGenerator>python manage.py shell
Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from apps.randomWord.models import *
>>> ClassName.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'ClassName' is not defined
>>> Users.objects.all()
<QuerySet []>
>>> Users.objects.create(first_name = "Chris", last_name = "Rock", email_address = "crock@gmail.com", age = 50)
<Users: Users object>
>>> Users.objects.first()
<Users: Users object>
>>> Users.objects.all()
<QuerySet [<Users: Users object>]>
>>> Users.objects.get(id=1)
<Users: Users object>
>>> c = Users.objects.get(id=1)
>>> c.delete()
(1, {'randomWord.Users': 1})
>>> Users.objects.all()
<QuerySet []>
>>> Users.objects.create(first_name = "Chris", last_name = "Rock", email_address = "crock@gmail.com", age = 50)
<Users: Users object>
>>> Users.objects.get(id=1).__dict__
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\k\Desktop\Python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\k\Desktop\Python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 385, in get
    self.model._meta.object_name
apps.randomWord.models.DoesNotExist: Users matching query does not exist.
>>> Users.objects.all()
<QuerySet [<Users: Users object>]>
>>> Users.objects.get(id=1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\k\Desktop\Python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\k\Desktop\Python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 385, in get
    self.model._meta.object_name
apps.randomWord.models.DoesNotExist: Users matching query does not exist.
>>> Users.objects.all().values()
<QuerySet [{'id': 2, 'first_name': 'Chris', 'last_name': 'Rock', 'email_address': 'crock@gmail.com', 'age': 50, 'created_at': datetime.datetime(2019, 7, 12, 3, 7, 31, 202972, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 7, 31, 202972, tzinfo=<UTC>)}]>
>>> Users.objects.get(id=2)
<Users: Users object>
>>> Users.objects.get(id=2).__dict__
{'_state': <django.db.models.base.ModelState object at 0x046EE2F0>, 'id': 2, 'first_name': 'Chris', 'last_name': 'Rock', 'email_address': 'crock@gmail.com', 'age': 50, 'created_at': datetime.datetime(2019, 7, 12, 3, 7, 31, 202972, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 7, 31, 202972, tzinfo=<UTC>)}
>>> Users.objects.create(first_name = "Ayaka", last_name = "Machon", email_address = "amachon@gmail.com", age = 22)
<Users: Users object>
>>> Users.objects.create(first_name = "Chicken", last_name = "Banana", email_address = "cbanana@gmail.com", age = 22)
<Users: Users object>
>>> Users.objects.create(first_name = "gudetama", last_name = "potato", email_address = "gpotato@gmail.com", age = 100)
<Users: Users object>
>>> Users.objects.all().values()
<QuerySet [{'id': 2, 'first_name': 'Chris', 'last_name': 'Rock', 'email_address': 'crock@gmail.com', 'age': 50, 'created_at': datetime.datetime(2019, 7, 12, 3, 7, 31, 202972, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 7, 31, 202972, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'Ayaka', 'last_name': 'Machon', 'email_address': 'amachon@gmail.com', 'age': 22, 'created_at': datetime.datetime(2019, 7, 12, 3, 11, 42, 728786, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 11, 42, 728786, tzinfo=<UTC>)}, {'id': 4, 'first_name': 'Chicken', 'last_name': 'Banana', 'email_address': 'cbanana@gmail.com', 'age': 22, 'created_at': datetime.datetime(2019, 7, 12, 3, 12, 12, 420834, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 12, 12, 420834, tzinfo=<UTC>)}, {'id': 5, 'first_name': 'gudetama', 'last_name': 'potato', 'email_address': 'gpotato@gmail.com', 'age': 100, 'created_at': datetime.datetime(2019, 7, 12, 3, 12, 48, 742884, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 12, 48, 742884, tzinfo=<UTC>)}]>
>>> Users.objects.all()
<QuerySet [<Users: Users object>, <Users: Users object>, <Users: Users object>, <Users: Users object>]>
>>> Users.objects.get(id=4)
<Users: Users object>
>>> c = Users.objects.get(id=4)
>>> c.first_name = "Chocobo"
>>> c.save()
>>> Users.objects.get(id=4).__dict__
{'_state': <django.db.models.base.ModelState object at 0x046EE550>, 'id': 4, 'first_name': 'Chocobo', 'last_name': 'Banana', 'email_address': 'cbanana@gmail.com', 'age': 22, 'created_at': datetime.datetime(2019, 7, 12, 3, 12, 12, 420834, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 15, 41, 838847, tzinfo=<UTC>)}
>>> Users.objects.all()
<QuerySet [<Users: Users object>, <Users: Users object>, <Users: Users object>, <Users: Users object>]>
>>> Users.objects.first()
<Users: Users object>
>>> Users.objects.last()
<Users: Users object>
>>> c = Users.objects.get(id=3)
>>> c.last_name = "Pancakes"
>>> c.save()
>>> c = Users.objects.get(id=2)
>>> c.delete()
(1, {'randomWord.Users': 1})
>>> Users.objects.all().order_by("first_name")
<QuerySet [<Users: Users object>, <Users: Users object>, <Users: Users object>]>
>>> Users.objects.all().values()
<QuerySet [{'id': 3, 'first_name': 'Ayaka', 'last_name': 'Pancakes', 'email_address': 'amachon@gmail.com', 'age': 22, 'created_at': datetime.datetime(2019, 7, 12, 3, 11, 42, 728786, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 19, 0, 896870, tzinfo=<UTC>)}, {'id': 4, 'first_name': 'Chocobo', 'last_name': 'Banana', 'email_address': 'cbanana@gmail.com', 'age': 22, 'created_at': datetime.datetime(2019, 7, 12, 3, 12, 12, 420834, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 15, 41, 838847, tzinfo=<UTC>)}, {'id': 5, 'first_name': 'gudetama', 'last_name': 'potato', 'email_address': 'gpotato@gmail.com', 'age': 100, 'created_at': datetime.datetime(2019, 7, 12, 3, 12, 48, 742884, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 12, 48, 742884, tzinfo=<UTC>)}]>
>>> Users.objects.all().order_by("-first_name")
<QuerySet [<Users: Users object>, <Users: Users object>, <Users: Users object>]>
>>> Users.objects.all().values()
<QuerySet [{'id': 3, 'first_name': 'Ayaka', 'last_name': 'Pancakes', 'email_address': 'amachon@gmail.com', 'age': 22, 'created_at': datetime.datetime(2019, 7, 12, 3, 11, 42, 728786, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 19, 0, 896870, tzinfo=<UTC>)}, {'id': 4, 'first_name': 'Chocobo', 'last_name': 'Banana', 'email_address': 'cbanana@gmail.com', 'age': 22, 'created_at': datetime.datetime(2019, 7, 12, 3, 12, 12, 420834, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 15, 41, 838847, tzinfo=<UTC>)}, {'id': 5, 'first_name': 'gudetama', 'last_name': 'potato', 'email_address': 'gpotato@gmail.com', 'age': 100, 'created_at': datetime.datetime(2019, 7, 12, 3, 12, 48, 742884, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 12, 48, 742884, tzinfo=<UTC>)}]>
>>> Users.objects.all().order_by("-first_name")
<QuerySet [<Users: Users object>, <Users: Users object>, <Users: Users object>]>
>>> Users.objects.all().values()
<QuerySet [{'id': 3, 'first_name': 'Ayaka', 'last_name': 'Pancakes', 'email_address': 'amachon@gmail.com', 'age': 22, 'created_at': datetime.datetime(2019, 7, 12, 3, 11, 42, 728786, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 19, 0, 896870, tzinfo=<UTC>)}, {'id': 4, 'first_name': 'Chocobo', 'last_name': 'Banana', 'email_address': 'cbanana@gmail.com', 'age': 22, 'created_at': datetime.datetime(2019, 7, 12, 3, 12, 12, 420834, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 15, 41, 838847, tzinfo=<UTC>)}, {'id': 5, 'first_name': 'gudetama', 'last_name': 'potato', 'email_address': 'gpotato@gmail.com', 'age': 100, 'created_at': datetime.datetime(2019, 7, 12, 3, 12, 48, 742884, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 7, 12, 3, 12, 48, 742884, tzinfo=<UTC>)}]>